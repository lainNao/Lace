■メモ
    ・たぶん最初フォルダ作ってないとエラーになるから、カラムスペースやカラムのフォルダは無いなら自動生成するようにすること

■ソース
    ・絶対インポートできるようにしておく
    ・DBは無し。jsonで。しいて言えばjsonをDBに使う。で、起動時にそのjsonを全部メモリ内に読み込む。
        ・必要に応じて配列化し、useListとかで扱えるようにするなどする。
        ・またはforceRebuild的な仕組みをどうにか使い、配列など使わずとも変更検知させる。いや、useKVS的なものがあればよい。useStateでもむしろできるはず。
    ・多言語化すること
    ・最終的にはnode_modules内も全部git監視下に置くこと（リポジトリ消えたら悲しいので）。いや、いいかな…？

■仕様
    ＜＞
        ・buildすると、DBやユーザデータ置き場のフォルダとか消えるので、DBは「無い場合は作る」という動作をするようにすること。
            ・ビルドするとパスが変わったりすることがありそうなので、やっぱり絶対パスで試す。絶対パスでやると逆にうまくいかなくなる場合もありそうなので、試しながらやる。
        ・一応過去のDBはコピーして残しておくこと（設定でどんくらい残すか決められるようにする）
        ・右クリックのメニューを変えること。そこでいろいろできるようにする
        ・再生ボタンはreact-uwpとかを使う？
        ・v2を作る時、v1からexportできるようにしたい
        ・エクスプローラーを左カラムに表示したい（例えば自分の創作技法サイト位のやつの物語技法のときの並びみたいなのを左カラムのクリックで一気にそこまで飛ばしたい）
        ・さすがに読み込み時や書き出し時に無駄なので、カラムスペースごとにdbファイルを分けること
            ・別カラムスペースと連動する方式を作りたい場合、その対象カラムスペースのDBを依存先として別途読み込む方式にする（つまり、カラムスペースのjsonのところに依存カラムスペースUUIDの配列的なものを用意して、そこにあるのも読み込むなど）
		・アップデートチェック機能もあるといい
    ＜悩み＞
        ■
            メディアと1対1になるのは、mediasの中に入れても問題無いしむしろそうするのが正当。(作品と、そのタイトルとか)
            対nになると、別テーブル作り、それぞれその中で紐づく他columnsのidを持つ必要がある。となるとn系のを更新すると、2つのテーブル(というかキー内部の上方)を同時更新することになる。
            カラムスペースのcolumnsの中に、「対n」になる系のカラムを追加していく仕組みにするとできる。そのカラムに対1なカラムはその子孫に持たせればいい(でも別にキー作る方向で共通化しちゃったほうがいいかも)。そのnはidで対応するカラムの子孫の配列に追加していくと。
            リストアイテムはどれ基準で表示するか選べるようにした方がいいね。曲名なのか、ジャンルなのか、技法なのか…。その時、例えばジャンルでユニークリスト表示にした時、曲名の表示はどうするか問題があるな。右カラムに出すのが楽そう。対n系は、一覧は右カラムに出すか、頑張ってセルに全部収めるか選択できるようにするかな。文字ならいいけど画像の時はどうする？
            よしできそう。ただ、対nがあるごとにリレーションが発生するからパフォーマンスどうなるかがあるな。
            あと中間テーブル無いから、削除する時全カラム内のidを走査しに行くことになるな。または後から、表示時に対象id無いなら消すとかいう処理書いても出来るかもね。
            まてよ、ジャンルをリストアイテムにした時、ほかのカラム空になることあるのでは。技法とか。でもまあそれは問題無いかな。空なだけで変ではない気がする。
            となると、メイン表示にするカラムと、そうでないカラムという概念が別れるな。まあデータの持ち方は↑のでよさそう。
            ただ、ツリー表示どうするかな。物語手法のあれとか、ツリーになってるから、どうデータ持たせてどこでそれを宛てがうか。ツリー表示用のカラム持たせればいいか。スラッシュ区切りとかで改装表現して。でもその階層の表示順序どうするかな。右クリックでtreeの表示や順序編集とかできるようにすればいいか。
            あと思ったんだけど、「雰囲気」カラムあったとき、それが曲に対してなのか、技法に対してなのかわからなくならないかな。いや、曲名の子孫データにしたらいいのか。または技法の子孫データ。でもあくまでもその雰囲気自体は別キーに本体をuuid的なのと合わせて持たせて、選択できるようにするのがいいと思う。
            カラムによっては、値をuuiDで持つのでなく、値の文字列をそのままuuidに使うのいいかもね(同じ値を許さない系の選択肢とか)。その方がjoinしなくていいから、表示をすぐできる。
            あと、同名曲あるんだから、ファイル保存する時にuuidをファイル名の頭につけてもいいかも(表示時は取る)。
            あとカラム作る時に、他のどのカラム(またはさらにその中の値)に対する値なのかを指定する必要あると思う。大変だな。
            そうなるとやっぱり、メインとなるリストアイテムはカラムスペースごとに1つに絞らないとダメかもしれないね。わからんけどまだ。
            あと表示形式を変えたい時あると思う。カラム型と、右カラムにリストでカラムと値を縦に積んで表示する方。

    ＜留意＞
        ■音楽のカラムスペースと、デザインのカラムスペースではちょっと違う（いや、違うんじゃなかった。同じだったわ）
            ・音楽は、リストアイテムには曲名を出せばいいが、デザインでは技法名を出したい。
            ・となると、その技法名に紐づくメディアが「n:n」になる。つまり、「技法名に対してカラムをつけていく」のみでなく「メディアに対しても、技法名をつけていく」という逆版もできる必要がある。
                ・それはデザインのみならず、いろんなものであると思う（物語技法でもそう。作曲技法でもそう。むしろこれがメインか）。そこをどうにか実装できるようにしておくこと。
            ・というか音楽でも、技法集として使う時はそうだった。技法と、対応メディアがn:nになってる。
            ・これ、つまりリストアイテムの左側に表示するのが「メディア名」の場合もあれば「技法名」の場合もあるということだ。
                ・今の設計はメディア名が並ぶ感じになってるから、これを技法名の方も並べられるようにしないといけない。
                    ・これって単に、カラムの順番を入れ替えて（先に技法名（ほぼenum的な使い方かな）をおいて）、技法名はgroupでdistinctして、右に該当メディアを集計して表示する感じか。辛いかも。
            ・うーん、単純に左カラムに「技法名（または本質的に、任意のカラム）」でのエクスプローラー作ればいいんじゃないかな。あくまでも中央のアイテムリストはメディア名（画像なら画像のサムネも）がメインとして。
                ・その任意のカラム名で左のエクスプローラーを自作できる仕組み作りたいところ。うーん。
            ・メディアプレイヤーモードと、技法ブラウズモードを分けるのは？なんか微妙そうだけど。一緒にしたいよね。
            ・いずれにせよ、複数のメディアに同じ技法を紐付けることがあるのだから、技法に対してもidつくことになるよね。
            ・メディアにIDがつく。技法にIDがつく。その他のカラムの値にもIDがつく。全部にIDがつく。つまり全てがn:nの関係になってるだけかな。
            ・単純に、全てがn:nの要素と考えればいいかもしれない。で、並びも自由にできると。
                ・その場合、用意すべきなのは「medias」的なキーじゃなく「elements」的な概念？「columns」はわかるけどどうすべきかまだわからないな
            ・今だと、一つのmediaに対して、いろいろなcolumns_dataがくっつくというデータの持ち方になってるから、これは解体したほうがいいかも。


■全ページ
    ・テーマを決められる（複数欲しいところ）。だけど最初はダークモードオンリーでよいと思う。
    ・画面サイズを変更できる（ミニプレイヤーモード、普通モード）
        https://www.it-swarm-ja.tech/ja/electron/electron%E3%81%A7%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/833870529/
    ・画面遷移時にプログレスバーを出す

■トップページ
    ＜全般＞
        ・メディアをリストで並べる。それは、「カラムスペース」という単位で表示するカラムやメディアを管理する。
            ・データ構造はまあ一緒でいいけど、使うカラムが違う
            ・メディアの種類によって、リストアイテムの表示形式を変える
    ＜機能＞
        ■D&Dでメディアアップロード
            ・はい
        ■メディアの再生
            ・はい
        ■カラム操作
            ・カラム作成、編集、削除
        ■リストアイテムの操作
            ・複数選択からの一斉操作など（そのモードの時は、メディアの左にチェックボックスをつける）
            ・削除、カラムの編集、など
            ・カラムの値によるフィルタリング、ソーティング
                ・そのフィルタリング条件やソートは、名前をつけて保存できる
            ・メディアのデータによるフィルタリング、ソーティング
    ＜UI＞
        ・

■データ構造
    ＜column_space＞
        {
            UUID: {                         //カラムスペースのUUID
                name: text,                    //カラムスペース名
                columns: {                     //カラムの全データ
                    UUID: {                      //カラムのUUID
                        name: string,            //カラム名
                        type: enum,              //カラムのタイプ（file, bool, tag, text, markdown, select, radio, combo, event(javascriptで定義。任意のカラムの値が変更されたら発火するイベントを作れる。evalで実行)）
                        collapsable: bool,       //コラプスするタイプかどうか（これがtrueなカラムがある場合、メディアの左側にコラプスアイコンつけることになる）
                        childs_columns: [        //何を子カラムに持つか（これ「child_columns」のほうが良さそう）
                            UUID,                  //子カラムUUID
                            ...
                        ],
                        data: {                  //自カラムが持つデータ達
                            UUID: any,             //自カラムデータのUUIDとデータ本体（実データの形式は、typeのenumによって変わる）
                            ...
                        },
                    },
                    ...
                }
            },
            ...
        }
    ＜それぞれのtypeごとのdataの形式＞
        ■fileの場合
            {
                path: text,              //メディアへのpath
                type: enum,              //メディア種類（img, audio, vidoe, txtなど）
                name: text,              //メディアのファイル名
                childs_columns_datas: {  //これが持つ他カラムの値を入れるやつ
                    UUID: {                 //他カラムのUUID
                        UUID,                 //他カラムのdataのUUID
                        ...
                    }
                }
            }

■ルール
    ＜ブランチ＞
        main            //リリース用
        develop         //開発用
        feature/～      //機能用
        feature/any     //機能用（なんでもあり）
    ＜コミット＞
        ・なにもない時は「git commit -m "-"」でよい