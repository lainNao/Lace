■メモ
    今「database.mock.js」ってなってる感じが実際のDBにすること。

■ソース
    ・絶対インポートできるようにしておく
    ・DBは無し。jsonで。しいて言えばjsonをDBに使う。で、起動時にそのjsonを全部メモリ内に読み込む。
        ・必要に応じて配列化し、useListとかで扱えるようにするなどする。
        ・またはforceRebuild的な仕組みをどうにか使い、配列など使わずとも変更検知させる。いや、useKVS的なものがあればよい。useStateでもむしろできるはず。
    ・多言語化すること
    ・最終的にはnode_modules内も全部git監視下に置くこと（リポジトリ消えたら悲しいので）。いや、いいかな…？

■仕様
    ＜＞
        ・一応過去のDBはコピーして残しておくこと（設定でどんくらい残すか決められるようにする）
    ＜留意＞
        ■音楽のカラムスペースと、デザインのカラムスペースではちょっと違う
            ・音楽は、リストアイテムには曲名を出せばいいが、デザインでは技法名を出したい。
            ・となると、その技法名に紐づくメディアが「n:n」になる。つまり、「技法名に対してカラムをつけていく」のみでなく「メディアに対しても、技法名をつけていく」という逆版もできる必要がある。
                ・それはデザインのみならず、いろんなものであると思う。そこをどうにか実装できるようにしておくこと。

■全ページ
    ・テーマを決められる（複数欲しいところ）。だけど最初はダークモードオンリーでよいと思う。
    ・画面サイズを変更できる（ミニプレイヤーモード、普通モード）
        https://www.it-swarm-ja.tech/ja/electron/electron%E3%81%A7%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/833870529/
    ・画面遷移時にプログレスバーを出す

■トップページ
    ＜全般＞
        ・メディアをリストで並べる。それは、「カラムスペース」という単位で表示するカラムやメディアを管理する。
            ・データ構造はまあ一緒でいいけど、使うカラムが違う
            ・メディアの種類によって、リストアイテムの表示形式を変える
    ＜機能＞
        ■D&Dでメディアアップロード
            ・はい
        ■メディアの再生
            ・はい
        ■カラム操作
            ・カラム作成、編集、削除
        ■リストアイテムの操作
            ・複数選択からの一斉操作など（そのモードの時は、メディアの左にチェックボックスをつける）
            ・削除、カラムの編集、など
            ・カラムの値によるフィルタリング、ソーティング
                ・そのフィルタリング条件やソートは、名前をつけて保存できる
            ・メディアのデータによるフィルタリング、ソーティング
    ＜UI＞
        ・

■データ構造
    ＜column_space＞
        {
            UUID: {                     //カラムスペースのUUID
                id: UUID,                     //カラムスペースのID
                name: text,                   //カラムスペース名
                medias: {
                    UUID: {                     //メディアのUUID
                        type: enum,           //メディア種類
                        name: text,           //メディアのファイル名
                        path: text,           //メディアへのpath
                        columns_data: {
                            カラムのUUID: any,   //カラムのデータ
                            ...
                        },
                    }
                },
                columns: {
                    UUID: {                     //カラムのUUID
                        name: string,         //カラム名
                        type: enum,           //カラムのタイプ（bool, tag, text, markdown, select, radio, combo, event(javascriptで定義。任意のカラムの値が変更されたら発火するイベントを作れる。evalで実行), image, sound）
                        collapsable: bool,    //コラプスするタイプかどうか（これがtrueなカラムがある場合、メディアの左側にコラプスアイコンつけることになる）
                    }
                }
            }
        }

■ルール
    ＜ブランチ＞
        main            //リリース用
        develop         //開発用
        feature/～      //機能用
        feature/any     //機能用（なんでもあり）
    ＜コミット＞
        ・なにもない時は「git commit -m "-"」でよい