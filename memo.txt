■メモ
    ・たぶん最初フォルダ作ってないとエラーになるから、カラムスペースやカラムのフォルダは無いなら自動生成するようにすること

■次の作業目安
    ・以下の「メイン仕様」を読んで、できるところから実装していく。
    ・まずはカラムの作成、データの追加、他カラムとのデータの紐付けかな。またはカラムスペースの追加や削除から
    ・それができたら、まずは物語技法の「ツリー状のセクション」と「技法」のカラムだけできるようにする。その後右側に表示するカラムを動的に選べるようにする。

■メイン仕様
    ・表形式にして、カラムを追加できるようにする。かつ行も追加できるようにする
    ・メインカラムのセルを選択したら、右側に出るカラムの行は変更されるようにする（紐付けはどうやる…？）
        ・一度ここ仮でなんらかのパターンで決め打ちでやってしまったほうがいい、どういう動作にしたかったのか思い出せない。例えばビジネスアイデアならどうなるのかなど。
            ・カラムは「サービス名」「いい部分」かなまずは。で良い部分だけでサービス名も逆検索できるようにするようなイメージだったはず。
            ・アイデアはやめよう。物語にする。
            ・物語上のカラムスペースが以下の構成になる
                    「物語上のセクション」 - 「カタルシス種類」
                    「カタルシス内容」 - 「カタルシス種類」、「作品名」
                    「作品名」 - 「カタルシス内容」、「カタルシス種類」
                    「カタルシス種類」 - 「作品名」、「カタルシス内容」
                ↑こんな感じで、メイン表示のカラムによって右側に表示する内容を変える。
    これがイメージ1★→        つまり表示は、一番左のカラムだけが複数行あって、その他はセル的には一つずつになる（表示がリストみたいになるイメージが正しいはず）
                            メイン表示カラムはセルの選択が可能で、選択してるセルが変わると右側のカラム内のリスト表示の内容が変わる。
                            選択中のメインカラムのセルはホバー感のある見た目にしておく。
                ・で紐付けはどうやるか。物語上のセクション名とカタルシス種類の紐付けは例えばどうするか。
                    ・シンプルに、増やすことになる。で表示がリスト表示だから、リストの一番下に「追加＋」ボタンでも置く感じかな。いやそれだと追加になって紐付けにはならない。
    これがイメージ2★→       ・となるとどうやるか。「紐付け」ボタンを用意して、それを押下したら小さいモーダルが出る。でその中のリストから選択する。そのリストに無かったらモーダル内の「追加＋」ボタンを押して新規追加したのを紐付ける。こんな感じでいいはず。
                            ・一応リスト内の全文検索機能はつけたほうがいい。
    これがイメージ3★→    ・でカラムの追加はどうやるか。シンプルに中央部分の右上あたりに「カラムに紐付け」ボタンを追加して、また同じく紐付けたいカラム名（同じカラムスペース内のもののみ）を選択させる。無いならまた「追加＋」ボタンを押下で作らせる（カラムタイプの選択もありで）
        1　・・・・・カラム達の表示イメージ（以下イメージ5以下でちょっと変えることにしたのでそちら参照）
        2　・・・・・メインカラムのセルへの別カラムの値を追加（または紐付け）のイメージ（イメージ5以下も参照）
        3　・・・・・メインカラムに紐付けるカラムを追加のイメージ
        この1,2,3で大体いけるはず。

    イメージ4
        ・VSCodeみたいに、左カラムを2つにする。で、左側の方をのあの見た目をそのまま使わせてもらう。複数のメニューがほしいから。「カラムスペース選択」とか「全文検索」とか「プラグイン検索」とか。
        ・そのような感じでいいと思う。で

    イメージ5
        ・元々の創作技法集のあのレイアウトのような感じにするイメージがあったことを忘れてた。あれは物語セクションごとに、適用できるテクを（ダブっても）あてがっていた。あのような感じを再現したい。
        ・あれは難しい。セクション自体が木構造になっていた。（いやそこ自体は結局1列なので簡単だった）。とにかくセクション・サブセクションに対応する手法をあてがえるようにしていた。
            ・逆にサブカラムから「どのメインカラムのセルにあてがうか」を複数選択できるようにしたほうがいい。データを追加していく時に、メインカラムのどのセルにあてがうのかを一発で複数選択できるようにしたほうがいい。それはできそう。
        ・たぶん音楽手法も同じような感じだったはず。オブジェクトに関しては「カタルシス種類」「オブジェクト」「作品名」「オブジェクトのジャンル（場所、服装、タイトル、など）」など複数あったけど多分同じ要領でいける。
        ・となると表示形式的なものは、普通にスプレッドシートのような感じだ。左カラムのセルを親としてその右側にそれに対応する値を複数行で表示する。

    イメージ6
        ・となると1つのメインカラムにつき複数のカラムをあてがえるのか？例えばで考える。「物語セクション」「手法」の他にカラム表示できるのか？
        ・いや、「アーティスト名」「曲名」「カタルシス名」「ジャンル名」のほうがわかりやすい。4つも表示できる。これはアーティストに対していろいろな情報をあてがっている形だけどこれは可能か？
            ・可能だった。あくまでもアーティストにあてがうカタルシス、ジャンル、曲名なのだから。普通にそのアーティストのセルの右側にそれぞれ複数リストで書けばいい。
        ・で、一つ疑問だけど例えばその4カラムが並んでるとして、曲名を押下したとする。その場合はどうなる？右クリックメニューから「メインカラムで表示」とかしたらメインカラムを変えて表示変える？
            ・そしたらアーティストで並び替えていたものが消えるから面倒では？できればもう少しアーティストをメインカラムにしながら別カラム関連のデータも深くたどれたいところ。
        ・分かった。分かった。分かった。以下に答え書く。
            「とあるカラムに値を追加したら、そのカラムスペースの他カラム全てに対して（の各セル）、その値を紐付けさせることができるモーダルが開く。でそこで一通り関連づけさせる」
            「そしたら、後はもう表示の問題。創作技法集のあれのように3カラムにするも自由、右カラムだけリスト表示にするのも自由。たぶんデータ的な紐付けに成功した時点でどうにかなる」
            「ただし、メインジャンル・サブジャンル　的な２つで一つの要素があるときどうするか。サブジャンルにあるものをメインジャンルで統括したいときもあるはず。それはそういうデータ型にするかな」

    イメージ8
        これは階層が複数ある（例の創作技法集のキャプチャ）
        ―――――――――――――――――――――――――――――――
        ・物語上のセクション					//これをソート順/分類順と捉える
            ・そのセクションでの技法			//これを表示の中心と考える
                ・その技法に関連づいた情報達	//これを関連データと考える（関連データは一直線にリスト表示をする）
                    ・雰囲気
                    ・事例
        ―――――――――――――――――――――――――――――――
            データ的に全て紐付けてれば↑は再現できるはず
            ・まず表示の中心とするカラムを決定する
            ・その次にそれのソート順にしたいカラムを設定する
            （この時点で並ばせることはできるはず）
            ・次に右側に表示したい関連データとなるカラムを選択する。
            （これで全部動的にいけてるはず。追加もいい感じにできるようにする）


        例えばこれならシンプルに
        ―――――――――――――――――――――――――――――――
        ・アーティスト名
            ・曲名
                ・その曲が持つ関連情報達
        ―――――――――――――――――――――――――――――――
        のような構造にもできるし単なるメディアプレイヤーが作れるしおそらくだいぶ要件満たす

        カラムタイプが複数ある
        ・ツリー型のセクション（物語上のセクション、音楽上のセクションなど）
        ・ラジオボタン
        ・リスト
        ・文字列
        ・ファイル（音声、動画、画像など）

        いずれもサブ情報を持たせることを可能にする（事例としてアーティスト名だけじゃなく曲名も表示したい時があるはずなので）

        これの設定をsetStateとかえ一時的に持っておくことになると思う

    イメージ9
        例えば最初とかどのカラムも存在しないよね
        まあそれは置いといて、データを作るモーダルも用意する。で、その時にすでに外カラムがあればそのカラムに対してのデータの紐付けも同時にさせるようにする（後からも可能）
            そこも楽にやれるようにしたほうがいい。バッチ的に後で一括でやれるのも簡単にやれるようにする。紐付けモードとか作って、全カラムを表示して、どこかのセルを選択した状態のまま他カラムのセルを連続でクリックしていけば紐付けられるとか。

    イメージ10（ソートについて）
        複合ソートも可能にしたい（編曲技法のところ見てもらえればそれやってるのがわかる

    イメージ11
        データのタイプごとのポリモーフィズムをどう実装するか考える
        TSで型を作って、それをどう使うか。コア部分だけしか共通しないのでテンプレートメソッド的な感じにはならないはず。カラムのデータを回す時にもう型分かってるはずなので、それを動的に読み取るようにする

■概念
    カラムスペース              //全カラムをまとめるオブジェクト
        カラム                  //カラム
            カラムロール            //カラムの役割
                ソーター（sorter）      //ソートカラムとして働く。複数設定可能（1st、2ndなど）
                メイン                  //ソーター順に表示されるカラム
                他                      //メインに紐付けられるカラム

■変更
    状態管理をatomFamilyを使って書き直す（カラムスペースごとの状態など）
    selectorFamilyも使えるはず（カラムスペース内のデータごとの状態取得）
    カラムスペースの上にさらに階層を作る。以下みたいなイメージ。
        音楽
            カラムスペース1
            カラムスペース2
            カラムスペース3
        絵
            カラムスペース1
            カラムスペース2
            カラムスペース3
    いやむしろ、カラムスペースより上位のオブジェクトの型はany（というかフォルダ型）にすれば何回層でもできるのではないか。たぶんできる。やれる時やる。

■TODO
    ＜一般＞
        ・ctrl + zである程度戻す機能がほしい。たぶん普通にcolumnSpacesの履歴を30個くらい前まで残しておけばいいだけなので後からでも実装できる。というかこの機能無いと怖くて使えない。
            ・ファイルシステムってゴミ箱から復元できるから安心感あるわけだし、戻る機能やバックアップがデフォで無いと使おうと絶対思えない。
        ・useDataの場所を変更できるようにしたい、後で。ひとまずdocumentにでも変更するか？
        ・特定サイズ未満へのリサイズは不可にする
        ・asarとかでインストール不要な形にパッケージングしたい
        ・サービス層で例外処理しないならその上で処理すること
        ・ツリーでexpandedしてるやつを、ウィンドウ閉じて次回開いた時も再生できるようにする
            ・これは単にそのexpandedに使ってる配列の値を保存して次回入れればいいだけなので簡単。基本は。でも、次回開いた時にDB変わってて指定のIDの要素が無いとエラーが出るから、そこも初期読み込み時に「存在しないIDは消す」というハンドリングする。
        ・vscodeみたいに各ペインの幅を変えられるようにしたい
    ＜技術＞
        ・自動テスト書いても良いかも…再帰の部分が特にバグったら面倒なので
        ・null安全化するかどうか考える
        ・ファイルに触るのはメインプロセス側だけにしたほうがいいかもしれない…　https://zenn.dev/forest1040/articles/7f6794d8651fd4
    ＜事務類＞
        ・ロゴの設定
    ＜各機能＞
        ■フォルダ移動機能
        ・移動したら移動先のフォルダは開いててほしい（消えたように見える）
        ・DnDしているフォルダがそれっぽくわかる見た目になってほしい。せめてbg-color変えるなど。できればvscodeっぽいやつのほうがいい（使ってるコンポネント的にbgcolorいじれないかもなので）
    ＜見た目＞
        ・なぜか横スクロールバーが太いので直す
        ・テーマどうするか問題

■UI案
    ＜カラムスペース＞
        以下のようなツリー表示にする
            ▼カラムスペース名
                カラム名 アイコン 未保存マーク        //アイコンは「sorter」とか「main」とか。ロールは右クリックとかから変えられるようにする
        で追加ボタンも用意してカラムスペースを追加できるようにする。カラム追加も同様にここでできるようにするか。

■ソース
    ・絶対インポートできるようにしておく
    ・DBは無し。jsonで。しいて言えばjsonをDBに使う。で、起動時にそのjsonを全部メモリ内に読み込む。
        ・必要に応じて配列化し、useListとかで扱えるようにするなどする。
        ・またはforceRebuild的な仕組みをどうにか使い、配列など使わずとも変更検知させる。いや、useKVS的なものがあればよい。useStateでもむしろできるはず。
    ・多言語化すること
    ・最終的にはnode_modules内も全部git監視下に置くこと（リポジトリ消えたら悲しいので）。いや、いいかな…？
    ・ダークモード、ライトモード、しゃれおつモードを用意する（最終的にはユーザーが自分で設定できるようにする）
    ・UUIDv4じゃなく、日時ありのやつにする。基本絶対かぶらないやつ。またはもうUUIDv4の後ろにタイムスタンプ追記でもする。不安なので。

■仕様
    ＜＞
        ・最終的にはいちいち毎操作ごとにファイルに保存するのはやめて、vscodeみたいに保留しておく。
            ・ただし、ファイルアップロードをしたら必ず同期する必要がある（それはvscodeでも同じはず）。テキストでの変化のみは保存保留が可能
    ＜＞
        ・buildすると、DBやユーザデータ置き場のフォルダとか消えるので、DBは「無い場合は作る」という動作をするようにすること。
            ・ビルドするとパスが変わったりすることがありそうなので、やっぱり絶対パスで試す。絶対パスでやると逆にうまくいかなくなる場合もありそうなので、試しながらやる。
        ・一応過去のDBはコピーして残しておくこと（設定でどんくらい残すか決められるようにする）
        ・右クリックのメニューを変えること。そこでいろいろできるようにする
        ・再生ボタンはreact-uwpとかを使う？
        ・v2を作る時、v1からexportできるようにしたい
        ・エクスプローラーを左カラムに表示したい（例えば自分の創作技法サイト位のやつの物語技法のときの並びみたいなのを左カラムのクリックで一気にそこまで飛ばしたい）
        ・さすがに読み込み時や書き出し時に無駄なので、カラムスペースごとにdbファイルを分けること
            ・別カラムスペースと連動する方式を作りたい場合、その対象カラムスペースのDBを依存先として別途読み込む方式にする（つまり、カラムスペースのjsonのところに依存カラムスペースUUIDの配列的なものを用意して、そこにあるのも読み込むなど）
		・アップデートチェック機能もあるといい
    ＜悩み＞
        ■
            メディアと1対1になるのは、mediasの中に入れても問題無いしむしろそうするのが正当。(作品と、そのタイトルとか)
            対nになると、別テーブル作り、それぞれその中で紐づく他columnsのidを持つ必要がある。となるとn系のを更新すると、2つのテーブル(というかキー内部の上方)を同時更新することになる。
            カラムスペースのcolumnsの中に、「対n」になる系のカラムを追加していく仕組みにするとできる。そのカラムに対1なカラムはその子孫に持たせればいい(でも別にキー作る方向で共通化しちゃったほうがいいかも)。そのnはidで対応するカラムの子孫の配列に追加していくと。
            リストアイテムはどれ基準で表示するか選べるようにした方がいいね。曲名なのか、ジャンルなのか、技法なのか…。その時、例えばジャンルでユニークリスト表示にした時、曲名の表示はどうするか問題があるな。右カラムに出すのが楽そう。対n系は、一覧は右カラムに出すか、頑張ってセルに全部収めるか選択できるようにするかな。文字ならいいけど画像の時はどうする？
            よしできそう。ただ、対nがあるごとにリレーションが発生するからパフォーマンスどうなるかがあるな。
            あと中間テーブル無いから、削除する時全カラム内のidを走査しに行くことになるな。または後から、表示時に対象id無いなら消すとかいう処理書いても出来るかもね。
            まてよ、ジャンルをリストアイテムにした時、ほかのカラム空になることあるのでは。技法とか。でもまあそれは問題無いかな。空なだけで変ではない気がする。
            となると、メイン表示にするカラムと、そうでないカラムという概念が別れるな。まあデータの持ち方は↑のでよさそう。
            ただ、ツリー表示どうするかな。物語手法のあれとか、ツリーになってるから、どうデータ持たせてどこでそれを宛てがうか。ツリー表示用のカラム持たせればいいか。スラッシュ区切りとかで改装表現して。でもその階層の表示順序どうするかな。右クリックでtreeの表示や順序編集とかできるようにすればいいか。
            あと思ったんだけど、「雰囲気」カラムあったとき、それが曲に対してなのか、技法に対してなのかわからなくならないかな。いや、曲名の子孫データにしたらいいのか。または技法の子孫データ。でもあくまでもその雰囲気自体は別キーに本体をuuid的なのと合わせて持たせて、選択できるようにするのがいいと思う。
            カラムによっては、値をuuiDで持つのでなく、値の文字列をそのままuuidに使うのいいかもね(同じ値を許さない系の選択肢とか)。その方がjoinしなくていいから、表示をすぐできる。
            あと、同名曲あるんだから、ファイル保存する時にuuidをファイル名の頭につけてもいいかも(表示時は取る)。
            あとカラム作る時に、他のどのカラム(またはさらにその中の値)に対する値なのかを指定する必要あると思う。大変だな。
            そうなるとやっぱり、メインとなるリストアイテムはカラムスペースごとに1つに絞らないとダメかもしれないね。わからんけどまだ。
            あと表示形式を変えたい時あると思う。カラム型と、右カラムにリストでカラムと値を縦に積んで表示する方。

    ＜留意＞
        ■音楽のカラムスペースと、デザインのカラムスペースではちょっと違う（いや、違うんじゃなかった。同じだったわ）
            ・音楽は、リストアイテムには曲名を出せばいいが、デザインでは技法名を出したい。
            ・となると、その技法名に紐づくメディアが「n:n」になる。つまり、「技法名に対してカラムをつけていく」のみでなく「メディアに対しても、技法名をつけていく」という逆版もできる必要がある。
                ・それはデザインのみならず、いろんなものであると思う（物語技法でもそう。作曲技法でもそう。むしろこれがメインか）。そこをどうにか実装できるようにしておくこと。
            ・というか音楽でも、技法集として使う時はそうだった。技法と、対応メディアがn:nになってる。
            ・これ、つまりリストアイテムの左側に表示するのが「メディア名」の場合もあれば「技法名」の場合もあるということだ。
                ・今の設計はメディア名が並ぶ感じになってるから、これを技法名の方も並べられるようにしないといけない。
                    ・これって単に、カラムの順番を入れ替えて（先に技法名（ほぼenum的な使い方かな）をおいて）、技法名はgroupでdistinctして、右に該当メディアを集計して表示する感じか。辛いかも。
            ・うーん、単純に左カラムに「技法名（または本質的に、任意のカラム）」でのエクスプローラー作ればいいんじゃないかな。あくまでも中央のアイテムリストはメディア名（画像なら画像のサムネも）がメインとして。
                ・その任意のカラム名で左のエクスプローラーを自作できる仕組み作りたいところ。うーん。
            ・メディアプレイヤーモードと、技法ブラウズモードを分けるのは？なんか微妙そうだけど。一緒にしたいよね。
            ・いずれにせよ、複数のメディアに同じ技法を紐付けることがあるのだから、技法に対してもidつくことになるよね。
            ・メディアにIDがつく。技法にIDがつく。その他のカラムの値にもIDがつく。全部にIDがつく。つまり全てがn:nの関係になってるだけかな。
            ・単純に、全てがn:nの要素と考えればいいかもしれない。で、並びも自由にできると。
                ・その場合、用意すべきなのは「medias」的なキーじゃなく「elements」的な概念？「columns」はわかるけどどうすべきかまだわからないな
            ・今だと、一つのmediaに対して、いろいろなcolumns_dataがくっつくというデータの持ち方になってるから、これは解体したほうがいいかも。


■全ページ
    ・テーマを決められる（複数欲しいところ）。だけど最初はダークモードオンリーでよいと思う。
    ・画面サイズを変更できる（ミニプレイヤーモード、普通モード）
        https://www.it-swarm-ja.tech/ja/electron/electron%E3%81%A7%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/833870529/
    ・画面遷移時にプログレスバーを出す

■トップページ
    ＜全般＞
        ・メディアをリストで並べる。それは、「カラムスペース」という単位で表示するカラムやメディアを管理する。
            ・データ構造はまあ一緒でいいけど、使うカラムが違う
            ・メディアの種類によって、リストアイテムの表示形式を変える
    ＜機能＞
        ■D&Dでメディアアップロード
            ・はい
        ■メディアの再生
            ・はい
        ■カラム操作
            ・カラム作成、編集、削除
        ■リストアイテムの操作
            ・複数選択からの一斉操作など（そのモードの時は、メディアの左にチェックボックスをつける）
            ・削除、カラムの編集、など
            ・カラムの値によるフィルタリング、ソーティング
                ・そのフィルタリング条件やソートは、名前をつけて保存できる
            ・メディアのデータによるフィルタリング、ソーティング
    ＜UI＞
        ・

■データ構造
    ＜column_space＞
        [
            {
                id: UUID,                   //カラムスペースのUUID
                name: text,                    //カラムスペース名
                columns: {},
                childColumnSpaces: [           //子カラムスペース達
                    {
                        id: UUID,                      //id
                        name: text,                    //カラムスペース名
                        columns: [                     //カラムの全データ
                            {
                                id: UUID,                //カラムのUUID
                                name: string,            //カラム名
                                type: enum,              //カラムのタイプ（file, bool, tag, text, markdown, select, radio, combo, event(javascriptで定義。任意のカラムの値が変更されたら発火するイベントを作れる。evalで実行)）
                                collapsable: bool,       //コラプスするタイプかどうか（これがtrueなカラムがある場合、メディアの左側にコラプスアイコンつけることになる）
                                cells: [                 //自カラムが持つデータ達
                                    各種データ             //自カラムデータのUUIDとデータ本体（実データの形式は、typeのenumによって変わる）
                                    ...
                                },
                            },
                            ...
                        }
                        childColumnSpaces: [],      //columnsにデータがある場合、ここが空である必要がある（ちょっと汚い設計な雰囲気感じてるけどもう無理、。実装的には不整合は防げる気はしてるから）
                    }
                }
            },
            ...
        ]
    ＜それぞれのtypeごとのdataの形式＞
        ■fileの場合
            {
                id: UUID,
                path: text,              //メディアへのpath
                type: enum,              //メディア種類（img, audio, vidoe, txtなど）
                name: text,              //メディアのファイル名
                relatedCells: [          //関連セル
                    {
                        id: UUID,              //
                        columnSpaceId: UUID,  //他カラムのUUID
                        cellId: UUID,         //他カラムのcellのUUID
                    },
                    ...
                ]
            }

■ルール
    ＜ブランチ＞
        main            //リリース用
        develop         //開発用
        feature/～      //機能用
        feature/any     //機能用（なんでもあり）
    ＜コミット＞
        ・なにもない時は「git commit -m "-"」でよい
    ＜ソース＞
        ・現状自動テストは無しの設計で

■仕様メモ
    ・簡単なウィンドウの状態保存にはlocalStorageを使っている
