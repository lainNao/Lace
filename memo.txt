ルールーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    ＜ブランチ＞
        main            //リリース用
        develop         //開発用
        feature/～      //機能用
        feature/any     //機能用（なんでもあり）

    ＜コミット＞
        ・なにもない時は「git commit -m "-"」でよい

    ＜ソース＞
        ・現状自動テストは無しの設計で。でも最終的には作りたい
            ・作る時はリポジトリのインターフェースとかも最終的に用意してDIとかもやる方向に変えたいとは思ってる（リポジトリのawaitどうする問題の後）

TODOーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    ＜重要（優先度高いorクリティカル）＞
        ■インストール不要化
            ・asarとかでインストール不要な形にパッケージングしたい
                https://imfly.gitbooks.io/electron-docs-gitbook/content/jp/tutorial/application-packaging.html
            ・その場合データの保存先パスもその実行ファイルが置いてある場所がデフォになるようにしたいところ
            ・インストール不要化したらなんか問題ある場合はインストール型にする。でもvscodeみたいに気軽にアップデートできる（できてるの？）ような感じにはしたい
        ■自動アップデート
            ・ぐぐったらなんかやっぱり公式がいろいろかんたんにやれるよう用意してくれてるっぽい
                https://www.google.com/search?q=electron+check+for+updates&oq=electron+check+for+updates&aqs=chrome..69i57.3909j0j4&sourceid=chrome&ie=UTF-8
            ・ついでにメニューバーのcheck for updatesも作って
            ・というか再インストールした時にデータが残るのかも確認したい
    ＜他（リリース前には必ず）＞
        ■最後の最後再の確認したり決めたりしたらいいや
            ・スクロールバーとか出たら崩れないか
                ・特に右側のペイン達の横スクロールとか忘れないこと
            ・テキストの大きさとか軽微なスタイルとかの見た目を最後に確認。例えば文字とか結構小さくて良いと思う。slackかなり小さいし
                ・なんか全体的に色どうにかする
                ・ちょっとフォーム関係の文字サイズだけ異様にでかくない？
            ・初期データはもうちょっと分かりやすいサンプルに変える。またはいらない。
            ・タスクバーとかに出るアイコンまだ設定されてないっぽい
            ・ライセンスを明記したい。何にするのかも決める。オープンソースには一応する。
        ■見た目
            ・補足表示とフィルター部分
        ■他
            ・ソース内のTODOを基本的に片付ける
            ・初期化時にDBの場所がlocalStorageにあるものから変わらないな。別にいいんだけど、もしその場所ごと消え去ってるならエラー出るだろうから、フォルダ無いなら作るような処理になってるか確認したほうがいい。なってるならいい。

    ＜他（おいおい）＞
        ■UI/UX
            ・selectedColumnSpaceIdもlocalStorageに保存して再起動時に再生できるようにするか。いやこれは選択性でいいかも
            ・DB移動のモーダル、なんか見た目チラ見できたけど変なので直したいところ
            ・ディレクトリのパスとかもバリューオブジェクトにしたほうがいいのでは
            ・メインカラムを右クリするメニュー
                関連セル表示を固定        //関連セル表示を固定する（かつずっとonmouse的な色にしておく）
                -----
                編集                     //セル編集する（テキスト、マークダウンのみ）
                リネーム                 //リネーム（メディア類）
                関連セル管理              //関連セル管理モーダルを開く
            ・設定画面とメニューバーのどこかにミュートモードのトグルをつける（特に音声データが基本的に勝手に再生始まるので職場だとミスりうるため）
                ・全audioとvideoにmuted={そのモードの真偽値}を入れるようにすればできそう
            ・中央ペインのセルとかを右クリしても直接編集とかリレーション管理とかできるようにしたいところ
            ・videoやaudioのlazy loadとかできるならしたいところ、調べるのも後においておいて今はスルー
            ・audioのプレイ状態はrecoilレベルのグローバル管理したほうがよかったかも…
            ・detailsでトグルする矢印をカスタマイズできるっぽいので、データタイプによって違う矢印表示にしたい
            ・メイン表示のところ、collapseできるようにする
                ・単なるdetailsタグでもいいかも。むしろ勝手にプレフィクスのあれついてくれて助かるかも。パフォーマンスも軽いだろうし
                    ・でもマークダウンのセルのプレビューに使っちゃった。まあ同時使用してもいいけどかぶるからどうするかな感はでてきたのでまあ後で考えろ
            ・ツリーのところ、もしかしたらメモ化したら設定画面から戻った時も変わらず表示されてくれるかもしれない気がする。たぶんできる。
            ・github pagesに説明書やDLリンク作る。
            ・元々react-uwp使いたかったんだよね…構想として…だからそれに乗り換えたい　あのざらざらした深海のような色合いが元々のイメージだった
            ・カラムの横幅を変えられるやつを導入したい resizable panel react とか split pane とかググればそれっぽいの出てくる　react-split-paneがシンプルでよい？re-resizableの方が？
                ・paneのリサイズは以下がマージされたら対応したい
                    https://github.com/moritzmhmk/react-split-pane/commit/a330d6da93091e487efd87a2dd19cc41f22907c8
            ・slackみたいにカーソルがエクスプローラー側にある時だけエクスプローラー側にスクロールバー出したい
            ・画面遷移時にプログレスバーを出す
            ・文字を確定させずにsubmitしたらIMEのあれが残るやつ、compositionstart, compositionupdate and compositionendをうまく使ってどうにか対処したい
            ・テーマどうするか問題
            ・disabledされてるUIパーツをタップやホバーした時になぜdisabledされているのかの理由を書いてほしい
            ・リンクをデフォルトブラウザで開く　https://qiita.com/indometacin/items/0a436338165dc8b76ec4#%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E9%96%8B%E3%81%8F
            ・nativeTheme.shouldUseDarkColors　とかでシステムの設定を反映させるかどうか（余裕出たらやるやつ）
            ・スクロールバーを出すのがそのdivにマウスが乗ったときのみにするのもライブラリあるっぽい
                https://openbase.com/categories/js/recently-updated-react-scroll-bar-libraries?orderBy=RECENTLY_UPDATED&
            ・せっかくだからフォントをウェブっぽくないちゃんとしたのに変えたいところ。いちいちhttpリクエスト発生するわけじゃないしさ。ただし絵文字とかも全対応させたいのでそこらへんちゃんとしてるやつのみかな。
            ・ショートカットキーとか
            ・多言語化（設定画面に言語設定も作る）
            ・ツリーの表示がもっさりしてるから別のライブラリに切り替えるか、または今のツリーのオプションを探す
            ・カラムスペース追加時に一瞬ガクっとなる（高さが限界を超える場合）のをいつか直す
            ・表示設定の順番変更できるようにしたように、セルとかも順番変更できるようにしたらどうか
        ■機能
            ・パフォーマンス問題は、最終的にはファイルDBじゃなく、ローカルに立てたDBMS（MySQLでもMongoDBでも、良さげなやつ選んだもの）を使えるようにして解消したい。
                ・キャッシュ表示設定を開いた時にその表示設定のキャッシュをそのDBMSから読み込む形（初期表示時にキャッシュを生成する。2回目からはそのキャッシュを読み込む。カラムスペースやリレーションに、その表示設定に関わる変更があったらキャッシュを消す）
                ・今はそのタブを開いた時にキャッシュがどうとかやってなくて内部で全部回してコンポーネント作ってるけど、それをキャッシュする＆キャッシュがあったらそこから再生する（いちいち全探索とか不要にする）ということをしたい。そうすればある程度の規模のデータにも耐えられるものになるはず。
            ・設定画面に開閉で開けるdangerゾーン作る。（DB初期化とか。）
            ・中央ペインとか無限スクロール入れる
                ・ただこれ、dataLength的な項目を埋めないといけないならちょっときつみが出てくるな…それの値を出せる別の手を考えるか、無限スクロールの代償として事前にその値を出す計算を事前に挟むかのどちらかかな
                ・補足ペインなら可能かな…？
            ・コンテキストメニューでカット、コピー、ペースト　https://qiita.com/indometacin/items/0a436338165dc8b76ec4#%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%81%A7%E3%82%AB%E3%83%83%E3%83%88%E3%82%B3%E3%83%94%E3%83%BC%E3%83%9A%E3%83%BC%E3%82%B9%E3%83%88
            ・各種モデルのAPI、駄目なのに例外も出ないし戻値も無い感じだと成功しましたって出るから紛らわしいのでそこらへんのモデルのAPIどうするか考える。
                ・再帰してるから変に例外出すと止まっちゃって面倒だから例外出せないんだよな気軽に…。戻値方式でやるか…でもどう統一するか…
                ・これはテスト実装と同時でいい気がする
            ・大量データの性能テスト、UI崩れのテストをする。めんどいから動作確認すらしてない。
                ・「これは駄目だな。カス」ってなったらアーキテクチャごと変えるのも全然考える。なんせ元々自分がほしいものだから諦められない
            ・最初DB作る時、もうドキュメント配下に「Lace」というディレクトリがある場合そこにデータ置きにいくようになってるので、そこでいいか確認したほうがいいかも。または(2)をつけるとか
            ・UUIDv4じゃなく、日時ありのやつにする。基本絶対かぶらないやつ。またはもうUUIDv4の後ろにタイムスタンプ追記でもする。不安なので。
            ・カラムやカラムスペースを消したら、紐付いてるファイルも消す。ただしそれはウィンドウを閉じる時とか次回開く時とかでいい。または明示的にクリーンアップのメニューを用意する。結果整合性的な。または関連ファイルを一気に削除しちゃう
				・これ逆に一緒に消しちゃうと、トランザクションでは戻せないから、やっぱり同時にやらずにクリーンアップ的なメニューを用意するのがいいと思う。たぶんこれ普通のwebアプリでも同じことすると思う、バッチ的な。知らんけど。
					・ただ、それなら「deleted_columnspaces」的なテーブルに入れておいてそこをピンポイントで走査するようにしないと全体を走査するのは処理効率下がるわ。でもそうなると大変なのでそこまでやるのはバージョンアップ対応でいいかも。クリーンアップ自体は最初から用意したい。
				・このクリーンアップは、設定画面に「DB容量最適化」的な項目を用意して、その説明になんでこの項目があるのか書いて、「最適化を行う」ボタンを用意すればいい。一応クリックしたら確認ウィンドウ出してOKなら行う。
            ・一応過去のDBはコピーして残しておくこと（設定でどんくらい残すか決められるようにする）
            ・「新しいプロジェクト」「既存のプロジェクト」みたいに読み込めるようにしたいところ…
            ・ctrl + zである程度戻す機能がほしい。たぶん普通にcolumnSpacesの履歴を30個くらい前まで残しておけばいいだけなので後からでも実装できる。というかこの機能無いと怖くて使えない。
            ・ファイルシステムってゴミ箱から復元できるから安心感あるわけだし、戻る機能やバックアップがデフォで無いと使おうと絶対思えない。
            ・トランザクションとりあえず作ったけど、必要なファイルだけロックするようにいつか変えたい。パフォーマンスのため。
            ・ドメインイベントを作るか考える。やり方的にはとりあえずかんたんにstaticフィールドに配列でオブザーバー達のクラス名とメソッド名を入れて、それを特定タイミングで自動newして発火するようにする感じでいいのかなと思う。いや、staticならnewもいらないし。
                ・でもこれ、重くならないかな？うーん。例えば末端のColumnの削除系メソッドにドメインイベントを仕込んだら、カラムが消されることなんて大量にあるじゃん。それを毎度発火するより、もっと上のColumnSpaceあたりで発火したいところだよね。
                    ・それは単に選択の問題かな。となるとむしろ今各種メソッドをColumnSpaces起点にやってるからそこにつっこめばいいかな。
                ・あとこれは各種メソッドをリファクタリングした後でやりたい。
            ・いろいろログを入れたい（特にエラーログ）。そうなるとドメインバリデーションの例外はスルーするようにしないといけないな。自前のを作るか。
                ・それに伴って、普通起こらないはずの例外と、機能的に使ってる例外達をできれば分けたいのかも。知らんけど
                    ・前者は「クラッシュ」と判定して、それが起こる前のDBを完全にバックアップし、一度アプリケーションを使用不能にする。なぜならそれ以上データ壊すの防ぎたいから。
                        ・で、そのクラッシュは自分のサーバに自動送信させたい。DBとしてfirebaseの無料枠使おうかな…？うーん権限判定とかできるかな。
                            ・もちろんその情報送信するかどうかはユーザーに許可取って設定させる。
                    ・後者は普通にアプリケーション内のgotoみたいな用途で使いたい。
                    ・後者の方は自前の例外の型を作ってそれ使えば良いと思う。それだけを機能的な例外として認識し、その他はクラッシュとして扱うかな…？
            ・カラムスペースのリネーム
            ・自動テストを入れてリファクタしやすくする
            ・カラム消したらそれにまつわる表示設定も消されるけど、いずれ消されないようにしたい。今はとりあえず削除で
            ・CSV取り込み、出力の機能がほしい（セルのリレーションについてはidで紐付けてもらう感じで。で、同じカラムにリレーション作ってたりしたらエラーとするなどはしたい。ただこれそれなりに大変そう）
                ・これ、このアプリケーション専用のデータ構造から一般的なデータ構造で関連データを見れるようにしたい要望あるだろうからあるとよいと思う
            ・ダークモード、ライトモード、しゃれおつモードを用意する（最終的にはユーザーが自分で設定できるようにする）
            ・v2を作る時、v1からexportできるようにしたい（これ、csvエクスポートとcsvインポートでまかなえるかも）
            ・画面サイズを変更できる（ミニプレイヤーモード、普通モード）
                https://www.it-swarm-ja.tech/ja/electron/electron%E3%81%A7%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/833870529/
        ■ソース
            ・モデルのミュータブル、イミュータブルどうするか問題　https://twitter.com/masuda220/status/1392531139756056577
            ・カラムのソート処理、それ用のコンポーネントに任せたほうがよかったかも…（探してもどれも惜しくて、優先度低い）
            ・正規化されたDBと表示用JSONを分けるのもあり
            ・ファイルに触るのはメインプロセス側だけにしたほうがいいかもしれない…　https://zenn.dev/forest1040/articles/7f6794d8651fd4
            ・「remote」が非推奨になってるので使わないコードに変更する。いや、できるならば。
            ・モーダルが連なると、コールバックをコントローラーから持ってくるかモーダル内で作るかの判断が出てくるけど、これどうするか問題ある。
                ・モーダル内はモーダル内でコントローラー作らずにやっていい気がする。
                ・それか、モーダルを1画面を換算し、一つにつき一つコントローラーを作るなど。多分こっちのほうがいい気がする。コントローラーにも大本のコントローラーと末端のコントローラーあって責務分けになるし。
            ・さすがに読み込み時や書き出し時に無駄なので、カラムスペースごとにdbファイルを分けたいところ…でも階層立ってるからな…
                ・別カラムスペースと連動する方式を作りたい場合、その対象カラムスペースのDBを依存先として別途読み込む方式にする（つまり、カラムスペースのjsonのところに依存カラムスペースUUIDの配列的なものを用意して、そこにあるのも読み込むなど）

メモーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    ＜概念＞
        カラムスペースス         //複数のカラムスペースをまとめるオブジェクト
        カラムスペース           //全カラムをまとめるオブジェクト
        カラム                  //カラム
        セル                    //カラムの中のセル
        リレイテッドセル         //セルに関連づけられたセル

    ＜CustomListは廃止＞
        ・CustomListは無理だ。せっかく考えたけどたぶん無理だ。以下のような表示でしょ？カラム多くてリレーション作れるには探索コストがすごいことになると思う（キャッシュするならまだしも、まだ無理だし）。
            こういう良さに紐づく以下の様な表示
                アーティスト名「曲名」　詳細の良さ説明
        ・よってCustomListは廃止。似たことやりたいならマークダウンで似たことできるはずだからそっちでやってほしい。
        ・消したときのコミット履歴です。いつか困ったら以下参照。
            https://github.com/lainNao/Lace/commit/4c45132ad6ae6411bba5ab03c8dc50e15455a0cf
        ・で以下が新しくしたときのコミット履歴
            https://github.com/lainNao/Lace/commit/63e76cf2a00dc512ee8abec6b0a221ebb53035bc
    ＜設定画面＞
        ・global_settings.jsonをいじるとする。設定画面は単純にラベルとinputのテーブルにしてCRUDするだけの見た目でとりあえずいいかな
            ■いじらせないけど存在するキー
                majorVersion: メジャーバージョン番号         //メジャーバージョンが違った時、マイグレーションする用に使う（これはユーザーには更新させない）。メジャーバージョン変わってもDBの構造変わらないならマイグレーションは不要
            ■いじれるキー
                autoReport: 真偽値                          //起きちゃいけない例外がキャッチされた時に自動でサーバーに情報を送るか。いらんかなこんなの。うーんまあ考えておく
        ・GlobalSettingsモデル、一応キーに型つけられるかも

    ＜音声データ、基本的には再生したら再生中のやつは一時停止したい＞
        ・音声セル管理モーダルでは実装したので他のところでも基本的にやること

    ＜リレーション、カラムスペースの削除に追従する必要あるので留意＞
       ・例えば以下はリレーションも適宜削除している
            removeColumnSpaceUsecase
            removeColumnUsecase
        ・カラムスペースを削除する時はカラムスペースごとリレーション削除すればいいので楽
        ・カラムを削除する時はtoとfromで別の削除することになるが、removeRelationOfColumnを呼べばよいようにした
        ・セルを削除する時はまた別途必要になってくるので、その時やる
        ・これ、ドメインイベントで対応しても良かったのかなと思う。頭が追いつかなかったけど。書き換えるなら書き換えて。

    ＜RelatedCells登録時の留意＞
        ・いずれのカラム両方にもデータ入れる必要ある（Aカラムのセル1とBカラムのセル2を関連付けた時、Aカラムのセル1の方にもBカラムのセル2の方にもRelatedCellに登録する必要ある。でないとたぶん表示時に計算量が増えすぎる）

    ＜大まかな表示のイメージ＞
        以下の3階層が基本的な考え
        ―――――――――――――――――――――――――――――――
        ・ソート列
            ・メイン表示列
                ・メイン表示列が持つ関連カラムと紐づくセル達
        ―――――――――――――――――――――――――――――――
        ソート列は複数指定可能

    ＜Boolean、Select、Radioとかの複数の値を取りうるカラムは、あってもいいけど消すことにした＞
        ・なぜなら同じことはテキストカラムで全部できるから
        ・Boolean、Select、Radioとかは要するに「セルが一つ」で、関連づけたそのカラムのその一つのセルに対して、関連づけた側のセルの方がその選択値を保持する必要あるんだよね。だからまずその点で一個複雑性が出る
        ・で、例えばselectって「複数の中からいずれかを選択」ってことだけど、それを一つだけ選択なのかcomboboxみたいに複数選択なのかとか考えてたら「そもそもそれってテキストカラムにして一つまたは複数関連づけてもらえばいいやつなんじゃないの？」と気づいてしまった
        ・複雑性が出ても本質的ならばいいんだけど、今回に関してはこれをそのままにしておくとそもそも想定していたデータ構造じゃなくてなんか二重のメタ構造ができてしまうから、それは微妙かなと思った
        ・代わりに、カラムごとに「表示タイプ」みたいなものを持たせて、表示する時に「タグ風に表示」「ラジオボタン的に表示」「セレクトボックス風に表示」とかできるようにしたらいいのかなとは思う

    ＜コード進行カラムの構想＞
        ・「コード進行」（＋「の断片」かな）カラムとか作れるようにして、それは「4M-3m7」とか登録したら「4M-3m」とか「4M6-3m9」とかも設定で非ケースセンシティブな検索もできるような感じのこともしたいところ…　後でコード進行単位でも検索したいしね。
            ・そうなるとソート順ペインは「1」から順になるだろうし、かつその右側のサブソート順はどうなるんだろう？選べるようにしたいよね（7thとM7とかテンションでも分けたいし、かと言って始まりだけじゃなく「4M7-3m7」と「4-3m」も同列に扱いたいし…）
                ・これはどうしようか…まあこれは出来終わってから追加でもいいんだけどシンプルにほしいところ…
        ・コード進行カラムは、「コード進行＋補足説明」にしたほうがいい。でコード進行自体は空欄でよいとしたほうがよい（具体的なコード進行の番号よりもセクションの流れが大事なのもあるので）

    ＜リズム表記カラムの構想＞
        ・コード進行カラムも作るならリズム表記のカラムも作る（○と●と|で表現してたやつ）

    ＜音楽ファイルや動画ファイルは切り抜きをして取り込みができる機能の構想＞
        ・動画ファイルやサウンドファイルは取り込む時に秒数～秒数の指定をして一部だけ取り込みとか簡単にできればよりよい

    ＜セルのポリモーフィズムについて＞
        ・要するにenumをキーに出し分けてくれるファクトリーを作ればいいだけ
        ・インスタンスのファクトリー、ビューのファクトリー、表示文字列のファクトリーをそれぞれ、ポリモーフィズムしたいやつの共有のEnumをキーにして作ればいい
        ・そのため、他のポリモーフィズムしたいところも同じく同じEnumをキーに各層でのファクトリーを作ればいいだけ
            ・別にファクトリーはクラス化する必要はないけど、クラスにまとめてしまってもいいかもしれない。

    ＜「～s」類のモデルはIDを持たない単なるファーストクラスコレクションなので適当にミュータブルにしている＞
        ・既にしていたメソッドをイミュータブルにする手間も感じた
        ・ただまあ必要ならどうにかすることも考える

    ＜表示/非表示フラグのuseState管理だとコスト高そうな部分は、hiddenクラスの削除/追加でやりくりしている＞
        ・はい

    ＜簡単なウィンドウの状態保存にはlocalStorageを使っている＞
        ・一応repository通したほうが良いかな…ソース的に…
        ・ここは後に必要ならば

    ＜コンテキストメニューやダイアログにおいてremoteを使っている＞
        ・コンテキストメニュークリックで動的にdialog出してその結果を受け取りたいんだけど、それがremote使わないと現状やり方わからなかったから。
            ・一応単純なことしかしないコンテキストメニューを出すのはメインプロセスのみでできるけど
        ・ただ「remote」はAPIとして廃止されてしまっているっぽいので、別のremoteのユーザーランドのやつとかに一応移行しておく必要がある。ただ試したけどうまくいかなかったのでまた…
            →いやこれ、invokeでできそう。
                ・invokeでメインプロセスに作ったイベントハンドラを叩く。
                ・そのイベントハンドラ内でダイアログを開かせる。ダイアログの表示文字列はレンダラープロセスから送信できるはず
                ・ダイアログの戻値はメインプロセスで取得し、取得したらメインプロセスからレンダラープロセスへsendする（それができるイベントの仕組みがあるはず）
                ・でそのsendされたのをレンダラープロセスに作ったイベントハンドラで受け取る（そのイベントハンドラはrecoilがアクセスできる範囲で作られる必要があるけどたぶんできる）

                    レンダラ→　メインでダイアログ開く
                                ↓
                    レンダラ  ←ダイアログの戻値
                    ↓
                    戻値によってrecoilの処理をする

                ・なんと面倒な…
        ・だからまあ今の所放置で

データ構造ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
    ＜カラムスペース集約＞（カラムスペースやその配下のセルやカラムなどを保持）
        [
            {
                id: UUID,                   //カラムスペースのUUID
                name: text,                    //カラムスペース名
                columns: {},
                childColumnSpaces: [           //子カラムスペース達
                    {
                        id: UUID,                      //id
                        name: text,                    //カラムスペース名
                        columns: [                     //カラムの全データ
                            {
                                id: UUID,                //カラムのUUID
                                name: string,            //カラム名
                                type: enum,              //カラムのタイプ
                                cells: [                 //自カラムが持つデータ達
                                    各種データ             //自カラムデータのUUIDとデータ本体（実データの形式は、typeのenumによって変わる）
                                    ...

                                    /*file類（Sound、Video、Image）の場合*/（音楽はアーティスト名もいるかと思ったけど、崩れるから辞めた。自分は不要。その代わり随所で楽に試聴できるようにしたいところではある）
                                    {
                                        name: text,              //メディアのファイル名
                                        dispname: text,          //表示用の別名
                                        basename: text,          //ファイル名（拡張子あり）
                                        extname: text,           //拡張子
                                        path: text,              //メディアへのpath
                                    }

                                    /*Textの場合*/
                                    {
                                        text: string,
                                    }

                                    /*Markdownの場合*/
                                    {
                                        title: string,
                                        text: string,
                                    }
                                ],
                            },
                            ...
                        ]
                        childColumnSpaces: [],      //columnsにデータがある場合、ここが空である必要がある（ちょっと汚い設計な雰囲気感じてるけどもう無理、。実装的には不整合は防げる気はしてるから）
                    },
                    ...
                ]
            },
            ...
        ]

    ＜関連セル集約＞（ルートだけモデル化し、その他はしてない…。がんばって）
        // RelatedCells
        {
            // RelatedCellsColumnSpaceIndicator
            カラムスペースのUUID: {

                // RelatedCellsColumnIndicator
                カラムのUUID: {

                    // RelatedCellsCellIndicator
                    //このセルの関連セル達を保存　（留意：関連元セルには「カラムID」の情報は持たない。なぜならカラムスペース直下にキーを作ればカラムからたどる不要だから）
                    セルのUUID: {

                        // RelatedCellsTargetColumnIndicator
                        // そのセルはこのカラムIDのこのセル達と関連している
                        カラムID: [セルID, セルID,...],
                        ...
                    },
                    ..

                }
                ...

            },
            ...
        }

    ＜表示形式集約＞（ソート形式や右ペインの表示形式を保持する）

        // DisplaySettings
        {
            DisplaySettings.children
            // カラムスペースごとの表示形式の保存
            カラムスペースのUUID: [

                // DisplaySetting
                {
                    // 表示形式ID
                    id: UUID,

                    // 表示設定名
                    name: "フレーズ別要素、とかの名前",

                    //ソートに使うカラム（降順昇順とかのサブパターンもあるだろうけどどうする…？後で…）
                    sortColumns: [カラムID, カラムID, ... ],

                    // メイン表示する中央カラム
                    mainColumn: カラムID,

                    // 関連セル達の表示形式
                    relatedCellsDisplaySettings: [
                        //この層を「relatedCellsDisplaySetting」とする。
                        {
                            columnId: カラムID,
                            direction: RelatedCellDisplayDirection,  //縦、横のみのEnumを新規で作る。（ちなみに横だとdetailsタグが使えないはず（改行されてしまう）のでクリックでモーダルで詳細開くか、onmouseでツールチップ的に表示するしかないかな）

                            //以下はHorizontalの場合のみ
                            hListDisplayType: HListDisplayType,  //「タグ」「プレーン」の二種。新しくEnum作る。
                            hListSeparator: 任意の文字列,         //セパレータ（タグの場合は基本的には空欄にしてもらえればいいイメージでいいやいろいろ制御分岐するの面倒なので。）
                        },
                        ... // これを残りカラム（ソートカラムやメインカラム以外のもの）で「+」で追加させる。カラム増やした時に新たに追加できるように。
                    ]

                },
                ...

            ],
            ...
        }

    ＜グローバル設定集約＞
        {
            // 初めての起動などで、まだ初期設定をしてないか（各種DBの自動作成など行う。いやDBの自動作成はファイルのあるなしで判定したほうがよさそう）
            "hasInitialized": 真偽値,

            //
        }


■サンプルデータ
    ＜＞
    ＜＞
    ＜display_settings.json＞
        {
            "asdf": [
                {
                    "id": "UUID",
                    "name": "フレーズ別要素、とかの名前",
                    "sortColumns": [111,222],
                    "mainColumn": "3333",

                    "relatedCellsDisplaySettings": [
                        {
                            "columnId": 123123,
                            "direction": "Vertical",
                            "vListPrefix": "Empty"
                        },
                        {
                            "columnId": 234234,
                            "direction": "Horizontal",
                            "hListDisplayType": "Tag",
                            "hListSeparator": ""
                        }

                    ]
                }
            ]
        }


